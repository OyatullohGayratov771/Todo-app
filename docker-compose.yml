services:
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - task-service
    networks:
      - app-net
    environment:
      - USER_SERVICE_URL=http://user-service:8081
      - TASK_SERVICE_URL=http://task-service:8082

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    networks:
      - app-net
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: 
      - ./user-service/.env

  task-service:
    build: ./task-service
    container_name: task-service
    ports:
      - "8082:8082"
    networks:
      - app-net
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: 
      - ./task-service/.env

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8083:8083"
    networks:
      - app-net
    depends_on:
      kafka:
        condition: service_healthy
    env_file: 
      - ./notification-service/.env

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    networks:
      - app-net

  db:
    image: postgres:14
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: todo_app
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: todo-app-zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: todo-app-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-net
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 10

volumes:
  db-data:

networks:
  app-net:
    driver: bridge
